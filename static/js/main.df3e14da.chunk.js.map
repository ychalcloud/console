{"version":3,"sources":["serviceWorker.ts","pages/index.ts","client/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Root","loadable","Login","Register","Dashboard","Instance","Billing","MyInfo","App","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBOC,EAAOC,aAAS,kBAAM,+DACtBC,EAAQD,aAAS,kBAAM,wDACvBE,EAAWF,aAAS,kBAAM,uDAC1BG,EAAYH,aAAS,kBAAM,8DAC3BI,EAAWJ,aAAS,kBAAM,+DAC1BK,EAAUL,aAAS,kBAAM,8DACzBM,EAASN,aAAS,kBAAM,+D,OCmBtBO,EAdO,kBACpB,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,YAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,cAAcC,UAAWT,IAC3C,YAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,iBAAiBC,UAAWR,IAC9C,YAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,aAAaC,UAAWJ,IAC1C,YAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,aAAaC,UAAWP,IAC1C,YAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,YAAYC,UAAWN,IACzC,YAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,WAAWC,UAAWL,O,8BCV9CM,IAASC,OAAO,YAAC,EAAD,MAASC,SAASC,eAAe,SH+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df3e14da.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import loadable from \"@loadable/component\";\n\nexport const Root = loadable(() => import(\"./Root\"));\nexport const Login = loadable(() => import(\"./Login\"));\nexport const Register = loadable(() => import(\"./Register\"));\nexport const Dashboard = loadable(() => import(\"./Dashboard\"));\nexport const Instance = loadable(() => import(\"./Instance\"));\nexport const Billing = loadable(() => import(\"./Billing\"));\nexport const MyInfo = loadable(() => import(\"./MyInfo\"));\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport {\n  Root,\n  Login,\n  Register,\n  Billing,\n  Instance,\n  MyInfo,\n  Dashboard\n} from \"../pages\";\n\nconst App: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Root} />\n      <Route exact path=\"/auth/login\" component={Login} />\n      <Route exact path=\"/auth/register\" component={Register} />\n      <Route exact path=\"/auth/info\" component={MyInfo} />\n      <Route exact path=\"/dashboard\" component={Dashboard} />\n      <Route exact path=\"/instance\" component={Instance} />\n      <Route exact path=\"/billing\" component={Billing} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './client/App';\n\nimport './styles/fonts/fonts.css';\nimport './styles/reset.css';\nimport './styles/index.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}