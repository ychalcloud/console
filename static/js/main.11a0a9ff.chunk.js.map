{"version":3,"sources":["components/ServiceWrapper2.tsx","assets/logo-one-color.svg","serviceWorker.ts","pages/index.ts","router/main.tsx","client/App.tsx","index.tsx"],"names":["HeaderContentWrap","LogoContentWrap","LogoWrap","LogoImg","MenuContainer","MenuContentsWrap","MenuContentWithoutPadding","Menu","NavLink","MenuLabel","MenuIcon","MenuButton","BodyContainer","Body","BottomMenuWrap","BottomMenu","ServiceWrapper2","children","src","Logo","size","to","activeClassName","css","module","exports","Boolean","window","location","hostname","match","Root","loadable","Login","Register","Dashboard","Instance","Billing","MyInfo","console","log","path","exact","component","App","Main","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11a0a9ff.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport {\n  AiFillAppstore,\n  AiFillCreditCard,\n  AiFillCloud,\n  FaUser,\n  MdCall,\n  FiChevronDown\n} from \"react-icons/all\";\n\nimport Logo from \"../assets/logo-one-color.svg\";\nimport { NavLink } from \"react-router-dom\";\n\nimport Footer from \"./Footer\";\nimport css from \"@emotion/css\";\n\nconst ServiceWrapper2: React.FC = ({ children }) => {\n  return (\n    <>\n      <MenuContainer>\n        <LogoContentWrap>\n          <LogoWrap>\n            <LogoImg src={Logo} />\n          </LogoWrap>\n        </LogoContentWrap>\n        <MenuContentWithoutPadding>\n          <MenuButton>\n            <span>Customer Center</span> <MdCall size={25} />\n          </MenuButton>\n        </MenuContentWithoutPadding>\n        <MenuContentsWrap>\n          <Menu\n            to=\"/main/dashboard\"\n            activeClassName=\"service-wrapper-active-menu\"\n          >\n            <AiFillAppstore size={25} css={MenuIcon} />\n            <MenuLabel>Dashboard</MenuLabel>\n          </Menu>\n        </MenuContentsWrap>\n        <MenuContentsWrap>\n          <Menu\n            to=\"/main/instance\"\n            activeClassName=\"service-wrapper-active-menu\"\n          >\n            <AiFillCloud size={25} css={MenuIcon} />\n            <MenuLabel>Instance</MenuLabel>\n          </Menu>\n        </MenuContentsWrap>\n        <MenuContentsWrap>\n          <Menu\n            to=\"/main/billing\"\n            activeClassName=\"service-wrapper-active-menu\"\n          >\n            <AiFillCreditCard size={25} css={MenuIcon} />\n            <MenuLabel>Billing</MenuLabel>\n          </Menu>\n        </MenuContentsWrap>\n        <MenuContentsWrap>\n          <Menu\n            to=\"/auth/info\"\n            activeClassName=\"service-wrapper-active-menu\"\n          >\n            <FaUser size={25} css={MenuIcon} />\n            <MenuLabel>My Info</MenuLabel>\n          </Menu>\n        </MenuContentsWrap>\n        <BottomMenuWrap>\n          <BottomMenu>이용 약관</BottomMenu>\n          <BottomMenu>개인 정보 처리 방침</BottomMenu>\n          <br />\n          <BottomMenu>ⓒ A Cloud Platform. All rights reserved.</BottomMenu>\n        </BottomMenuWrap>\n      </MenuContainer>\n      <BodyContainer>\n        <Body>\n          {/*<Header>*/}\n          {/*  <HeaderContentWrap>*/}\n          {/*    <ProfileWrap>*/}\n          {/*      <ProfileImg src=\"https://picsum.photos/500/500\" />*/}\n          {/*      <ProfileInfoWrap>*/}\n          {/*        <ProfileName>이승민</ProfileName>*/}\n          {/*        <ProfileInfo>lee@seungmin.io</ProfileInfo>*/}\n          {/*      </ProfileInfoWrap>*/}\n          {/*      <FiChevronDown size={20} color=\"#72798B\" />*/}\n          {/*    </ProfileWrap>*/}\n          {/*  </HeaderContentWrap>*/}\n          {/*</Header>*/}\n          {children}\n        </Body>\n      </BodyContainer>\n    </>\n  );\n};\n\nconst Header = styled.div`\n  display: flex;\n  height: 100px;\n  background-color: white;\n  justify-content: flex-end;\n`;\n\nconst HeaderContentWrap = styled.div`\n  display: flex;\n  width: 300px;\n`;\n\nconst LogoContentWrap = styled(HeaderContentWrap)``;\n\nconst LogoWrap = styled.div`\n  display: flex;\n  width: 260px;\n  justify-content: center;\n  margin: auto;\n`;\n\nconst LogoImg = styled.img`\n  width: 70%;\n  height: fit-content;\n`;\n\nconst MenuContainer = styled.div`\n  display: flex;\n  position: fixed;\n  flex-direction: column;\n  width: 300px;\n  height: 100%;\n  align-items: center;\n  background-color: white;\n  z-index: 300;\n  border-right: 1px solid #f5f6fa;\n`;\n\nconst MenuContentsWrap = styled.div`\n  display: flex;\n  width: 260px;\n  padding: 20px;\n`;\n\nconst MenuContentWithoutPadding = styled(MenuContentsWrap)`\n  padding: 20px 0;\n`;\n\nconst Menu = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  color: #8c92a7;\n  text-decoration: none;\n  box-sizing: border-box;\n  position: relative;\n  // &: after {\n  //   content: \"\";\n  //   display: block;\n  //   width: 5px;\n  //   height: 100%;\n  //   background-color: #ea6969;\n  //   position: absolute;\n  //   right: 0;\n  //   opacity: 0;\n  //   transition: opacity 0.2s;\n  // }\n  &: hover {\n    &: after {\n      opacity: 1;\n    }\n  }\n`;\n\nconst MenuLabel = styled.span`\n  font-family: \"Noto Sans KR\", sans-serif;\n  font-weight: 500;\n  font-size: 16px;\n  margin-left: 30px;\n  z-index: 100;\n  .service-wrapper-active-menu > & {\n    color: #333;\n  }\n`;\n\nconst MenuIcon = css`\n  z-index: 100;\n  .service-wrapper-active-menu > & {\n    color: #7c2ce4;\n  }\n`;\n\nconst MenuButton = styled.button`\n  width: 100%;\n  border: 0;\n  margin: 0;\n  outline: 0;\n  display: flex;\n  padding: 14px 25px;\n  background-color: #7c2ce4;\n  font-size: 16px;\n  color: white;\n  font-family: \"Noto Sans KR\", sans-serif;\n  font-weight: 500;\n  border-radius: 8px;\n  justify-content: space-between;\n  cursor: pointer;\n`;\n\nconst BodyContainer = styled.div`\n  width: calc(100% - 300px);\n  display: flex;\n  flex-direction: row;\n  height: auto;\n  min-height: 100%;\n  margin-left: 300px;\n`;\n\nconst Body = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  background-color: #f5f6fa;\n  min-height: 100vh;\n`;\n\nconst ProfileWrap = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  align-items: center;\n`;\n\nconst ProfileImg = styled.img`\n  width: 58px;\n  height: 58px;\n  border-radius: 29px;\n`;\n\nconst ProfileInfoWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 20px;\n  height: 100%;\n  justify-content: space-around;\n`;\n\nconst ProfileInfo = styled.span`\n  font-weight: 300;\n`;\n\nconst ProfileName = styled(ProfileInfo)`\n  font-weight: 400;\n`;\n\nconst BottomMenuWrap = styled.div`\n  margin-top: auto;\n  padding: 20px;\n`;\n\nconst BottomMenu = styled.a`\n  color: #494c56;\n  font-size: 14px;\n  font-weight: 300;\n  line-height: 2;\n  &: first-of-type {\n    margin-right: 10px;\n  }\n`;\n\nexport default ServiceWrapper2;\n","module.exports = __webpack_public_path__ + \"static/media/logo-one-color.a2e09bf8.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import loadable from \"@loadable/component\";\n\nexport const Root = loadable(() => import(\"./Root\"));\nexport const Login = loadable(() => import(\"./Login\"));\nexport const Register = loadable(() => import(\"./Register\"));\nexport const Dashboard = loadable(() => import(\"./Dashboard\"));\nexport const Instance = loadable(() => import(\"./Instance\"));\nexport const Billing = loadable(() => import(\"./Billing\"));\nexport const MyInfo = loadable(() => import(\"./MyInfo\"));\n","import * as React from \"react\";\nimport ServiceWrapper2 from \"../components/ServiceWrapper2\";\nimport { Route } from \"react-router\";\nimport { Billing, Dashboard, Instance } from \"../pages\";\n\nexport default ({ match }: { match: { path: string } }) => {\n    console.log(match.path)\n  return (\n    <ServiceWrapper2>\n      <Route exact path={`${match.path}/dashboard`} component={Dashboard} />\n      <Route exact path={`${match.path}/instance`} component={Instance} />\n      <Route exact path={`${match.path}/billing`} component={Billing} />\n    </ServiceWrapper2>\n  );\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport {\n  Root,\n  Login,\n  Register,\n  Billing,\n  Instance,\n  MyInfo,\n  Dashboard\n} from \"../pages\";\n\nimport Main from \"../router/main\";\n\nconst App: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Root} />\n      <Route exact path=\"/auth/login\" component={Login} />\n      <Route exact path=\"/auth/register\" component={Register} />\n      <Route exact path=\"/auth/info\" component={MyInfo} />\n      <Route path=\"/main\" component={Main} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './client/App';\n\nimport './styles/fonts/fonts.css';\nimport './styles/reset.css';\nimport './styles/index.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}